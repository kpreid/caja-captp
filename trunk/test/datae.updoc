# Copyright 2009 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

  ? pragma.syntax("0.9")
  > pragma.enable("accumulator")

This file tests the Caja-CapTP implementation of Data-E serialization, which includes deJSONTreeKit, deSubgraphKit, and makeSurgeon.

-------------------------------------------------------------------------------
The following code is boilerplate to load a Cajita module with collecting the return value. This code should be folded into some Cajita or EoJS library.

  ? def js := <import:org.erights.eojs.jsTools>; null

  ? def cajita := <import:org.erights.eojs.cajita>
  > def cajitaEnv := <import:org.erights.eojs.cajitaEnv>
  > null

  ? def exports; null
  
  ? def oldNewModuleHandler := cajitaPriv.getNewModuleHandler()
  > cajitaPriv.setNewModuleHandler(js.asObject([
  >   "handle" => js.asFunction(fn newModule {
  >     bind exports := newModule.instantiate(cajitaPriv.get___(), oldNewModuleHandler.getImports())
  >   })
  > ]))
  
  ? EoJS.asyncLoad("../src/everything.out.js")
  
  ? interp.waitAtTop(exports)

-------------------------------------------------------------------------------

  ? def jsRef := exports["Ref"]
  # value: [Caja-CapTP Ref]
  
  ? def deJSONTreeKit := exports["deJSONTreeKit"]
  # value: deJSONTreeKit
  
  ? def deSubgraphKit := exports["deSubgraphKit"]
  # value: deSubgraphKit
  
  ? def deJavaScriptKit := exports["deJavaScriptKit"]
  # value: deJavaScriptKit
  
-------------------------------------------------------------------------------

Testing the builder of deJSONTreeKit.

XXX to review: Should we wrap our values in a {} so that they match the JSON 'object' rather than 'value' production?

  ? def b := deJSONTreeKit.makeBuilder()
  # value: <deJSONTreeKit builder>

--- Atoms.

  ? def Atom := deJSONTreeKit.makeBuilder().atomType()
  # value: <JS func jsonAtomType>
  
  ? accum [] for x in ["a", 1, 1.2, -1.2, js.asObject([].asMap())] { _.with(Atom(x)) }
  # value: [true, true, true, true, false]
  
  ? def b := deJSONTreeKit.makeBuilder()
  > b.buildRoot(b.buildAtom("abcd"))
  # value: "abcd"
  
  ? def b := deJSONTreeKit.makeBuilder()
  > b.buildRoot(b.buildAtom(11234))
  # value: 11234

XXX review (format/interop): Do we want to support ints distinctly in the notation, even if we can't generate them distinctly? Probably yes if we get a BigInteger class.
  
  ? def b := deJSONTreeKit.makeBuilder()
  > b.buildRoot(b.buildAtom(11234.5))
  # value: 11234.5
  
  ? def b := deJSONTreeKit.makeBuilder()
  > b.buildRoot(b.buildAtom(-11234.5))
  # value: -11234.5
  
XXX review (format/interop): In traditional Data-E negative numbers are represented as negation operations, but JS has no negate method, so we permit them in atoms.

Bogus atom:

  ? def b := deJSONTreeKit.makeBuilder()
  > b.buildRoot(b.buildAtom(js.asObject([].asMap())))
  # problem: Error: deJSONTreeKit: This is not an atom: [object Object]


--- Import.

  ? def b := deJSONTreeKit.makeBuilder()
  > b.buildRoot(b.buildImport("aardvark"))
  # value: ["import", "aardvark"]
  
--- Call.

  ? def b := deJSONTreeKit.makeBuilder()
  > b.buildRoot(b.buildCall(b.buildImport("a"), "b", [b.buildImport("c"), b.buildImport("d")]))
  # value: ["call", ["import", "a"], "b", [["import", "c"], ["import", "d"]]]

--- Define and ibid.

  ? def b := deJSONTreeKit.makeBuilder()
  > b.buildRoot(b.buildCall(def [t,id] := b.buildDefine(b.buildAtom("Lorem")); t,
  >                         "add",
  >                         [b.buildIbid(id)]))
  # value: ["call", ["define", 0, "Lorem"], "add", [["ibid", 0]]]

Test that define increments a counter. (Also demonstrates that unused defines are eliminated.)

  ? def b := deJSONTreeKit.makeBuilder()
  > b.buildRoot(b.buildCall(def [t1,_] := b.buildDefine(b.buildAtom("Lorem")); t1,
  >                         "add",
  >                         [def [t2,id] := b.buildDefine(b.buildAtom("ipsum")); t2,
  >                          def [t3,_] := b.buildDefine(b.buildAtom("dolor")); t3,
  >                          b.buildIbid(id)]))
  # value: ["call", "Lorem", "add", [["define", 1, "ipsum"], "dolor", ["ibid", 1]]]

--- Defrec.

Trivial circular structure: one call whose arg is itself

  ? def b := deJSONTreeKit.makeBuilder()
  > b.buildRoot(def prom := b.buildPromise()
  >             b.buildDefrec(prom+1,
  >                           b.buildCall(b.buildImport("makeFoo"),
  >                                       "run",
  >                                       [b.buildIbid(prom)])))
  # value: ["defrec", 0, ["call", ["import", "makeFoo"], "run", [["ibid", 0]]]]

-------------------------------------------------------------------------------

Testing the builder of deSubgraphKit.

  ? def env := js.asObject([
  >   "x" => "aardvarks",
  >   "makeArray" => js.asFunction(__makeList),
  > ]); null

  ? def b := deSubgraphKit.makeBuilder(env)
  # value: <deSubgraphKit builder>

--- Atoms

  ? def Atom := deSubgraphKit.makeBuilder().atomType()
  # value: <JS func subgraphAtomType>
  
  ? accum [] for x in ["a", 1, 1.2, -1.2, js.asObject([].asMap())] { _.with(Atom(x)) }
  # value: [true, true, true, true, true]
    
  ? def b := deSubgraphKit.makeBuilder(env)
  > b.buildRoot(b.buildAtom(43))
  # value: 43
  
  ? def b := deSubgraphKit.makeBuilder(env)
  > b.buildRoot(b.buildAtom("Lorem"))
  # value: "Lorem"

XXX if we introduce a big-integer type test it here

--- Import

  ? def b := deSubgraphKit.makeBuilder(env)
  > b.buildRoot(b.buildImport("x"))
  # value: "aardvarks"

  ? def b := deSubgraphKit.makeBuilder(env)
  > b.buildRoot(b.buildImport("yz"))
  # problem: Error: deSubgraphKit: Import not found: yz

--- Call

The argument nodes are arbitrary, just to show that they are passed through.

  ? def b := deSubgraphKit.makeBuilder(env)
  > b.buildRoot(b.buildCall(b.buildImport("makeArray"), "call", ["bogus", b.buildImport("x"), b.buildAtom("aardwolf")]))
  # value: ["aardvarks", "aardwolf"]

--- Define

  ? def b := deSubgraphKit.makeBuilder(env)
  > b.buildRoot(b.buildCall(b.buildImport("makeArray"), "call",
  >                         [null,
  >                          def [t1,_] := b.buildDefine(b.buildAtom("Lorem")); t1,
  >                          def [t2,id] := b.buildDefine(b.buildAtom("ipsum")); t2,
  >                          def [t3,_] := b.buildDefine(b.buildAtom("dolor")); t3,
  >                          b.buildIbid(id)]))
  # value: ["Lorem", "ipsum", "dolor", "ipsum"]

--- Defrec

  ? def b := deSubgraphKit.makeBuilder(env)
  > b.buildRoot(def p := b.buildPromise()
  >             b.buildDefrec(p+1, b.buildCall(b.buildImport("makeArray"), "call",
  >                                            [null, "Lorem", "ipsum", b.buildIbid(p)])))
  # value: ["Lorem", "ipsum", [Ref to Lorem,ipsum,[Ref to ]]]

-------------------------------------------------------------------------------

Given that the builders for each kit have been tested independently, we now test the recognizers by connecting them to the builders. 

Utility.
  ? def makeAtomNotingBuilder() {
  >   def builder := cajita.copy(deJSONTreeKit.makeBuilder())
  >   builder["buildAtom"] := js.asFunction(fn atom { ["atom", atom] })
  >   return cajita.freeze(builder)
  > }; null

deSubgraphKit recognizer. First, some test infrastructure...

  ? def uncallExample {}  # this needs to be not-an-atom
  > 
  > def failingUncaller := js.asObject([
  >   "optUncall" => js.asFunction(def _(obj) {
  >     return js.null()
  >   }),
  > ])
  > def testUncaller := js.asObject([
  >   "optUncall" => js.asFunction(def _(obj) {
  >     if (obj == uncallExample) {
  >       return [1, "run", ["aardvarks", 32.5]]
  >     } else if (obj == "aardvarks") {
  >       return ["FAIL", "run", ["shouldn't get my hands on an exit"]]
  >     } else if (cajita.isArray(obj)) {
  >       return [0, "array", cajita.snapshot(obj)]
  >     } else {
  >       return js.null()
  >     }
  >   }),
  > ])
  > 
  > def testUnenv := cajita.newTable(false)
  > testUnenv.set("aardvarks", "x")
  > null

Construct a recognizer.

  ? def r := deSubgraphKit.makeRecognizer([failingUncaller, testUncaller], testUnenv)
  # value: <deSubgraphKit recognizer>

There are four cases when an object is serialized; they are considered in this order.

1. It is a graph exit: builder.buildImport is used.

  ? r.recognize("aardvarks", deJSONTreeKit.makeBuilder())
  # value: ["import", "x"]

2. It is an atom: builder.buildAtom is used.

  ? r.recognize(1, makeAtomNotingBuilder())
  # value: ["atom", 1]

  ? r.recognize("foo", makeAtomNotingBuilder())
  # value: ["atom", "foo"]

XXX test that this uses the builder's atom type test

3. It is a composite object; each uncaller is applied to it in order, and the first success is passed to builder.buildCall. (The recipient and arguments here are chosen to exercise that they are in fact recursively processed.)

  ? r.recognize(uncallExample, deJSONTreeKit.makeBuilder())
  # value: ["call", 1, "run", [["import", "x"], 32.5]]

4. It is not serializable; an error is produced. (Information on the specific object goes to the console.)

  ? r.recognize(def randomObj {}, deJSONTreeKit.makeBuilder())
  # problem: Error: deSubgraphKit: can't uneval object

Also, shared and circular structure must be reconstructed.

(Just for testing purposes, the uncaller given above uncalls an array as [0, "list", [...elems...]]. This is just arranged to be minimal, and not a practical system.)

  ? r.recognize([uncallExample, uncallExample], deJSONTreeKit.makeBuilder())
  # value: ["call", 0, "array", [["define", 4, ["call", 1, "run", [["import", "x"], 32.5]]], ["ibid", 4]]]

That was a test of shared structure; now, circular structure. First, we construct a circular structure which does *not* contain any Refs.

  ? def a := js.array("a", js.array("b"))
  > a[1][1] := a
  > a
  # value: (JS array)["a", (JS array)["b", <***CYCLE***>]]

  ? r.recognize(a, deJSONTreeKit.makeBuilder())
  # value: ["defrec", 0, ["call", ["define", 2, 0], "array", ["a", ["call", ["ibid", 2], "array", ["b", ["ibid", 0]]]]]]

Now, the same circular structure defined with Caja-CapTP refs. (E [] literals are Cajita-frozen arrays.)

  ? def pr := jsRef.promise()
  > pr["resolver"].resolve(def a := ["a", ["b", pr["promise"]]])
  > a
  # value: ["a", ["b", [Ref to a,b,[Ref to ]]]]
  (The above is mixed-up because of using both E-style and JS-style printing)
  
  ? r.recognize(a, deJSONTreeKit.makeBuilder())
  # value: ["defrec", 0, ["call", ["define", 2, 0], "array", ["a", ["call", ["ibid", 2], "array", ["b", ["ibid", 0]]]]]]

There is an issue with buildAtom invocation: it must not (unintentionally) leak out authority-bearing objects. See http://www.eros-os.org/pipermail/e-lang/2009-August/013210.html for details. Per that design, we should be using a Data restriction, but for now we are using an 'is a JavaScript primitive type' restriction. XXX fix this once we've agreed on the design as discussed in email.

  ? # Test infrastructure
  > def anythingUncaller := js.asObject([
  >   "optUncall" => js.asFunction(def anythingOptUncall(obj) {
  >     return ["wasUncalled", E.toString(obj), []]
  >   }),
  > ])
  > def atomStubBuilder := js.asObject({[
  >   "atomType"  => js.asFunction(fn { js.asFunction(fn _ { true }) }),
  >   "buildRoot" => js.asFunction(def buildRoot(node) { return node; }),
  >   "buildAtom" => js.asFunction(def buildAtom(atom) { return ["buildAtom:", atom] }),
  >   "buildCall" => js.asFunction(def buildCall(r,v,[]) { return ["buildCall:", v] }),
  >   "buildPromise" => js.asFunction(def buildPromise() { return null }),
  >   "buildDefine" => js.asFunction(def buildDefine(n,v) { return v }),
  >   "buildDefrec" => js.asFunction(def buildDefrec(r,v) { return v })
  > ]})
  > def recognizer := deSubgraphKit.makeRecognizer([anythingUncaller], testUnenv)
  > def test(obj) { return recognizer.recognize(obj, atomStubBuilder); }
  > null
  
  ? test(-1)
  # value: ["buildAtom:", -1]

  ? test(-1.5)
  # value: ["buildAtom:", -1.5]

  ? test(js.null())
  # value: ["buildAtom:", <JS null>]

  ? test(js.undefined())
  # value: ["buildAtom:", <JS undefined>]

  ? test("xyz")
  # value: ["buildAtom:", "xyz"]

  ? test(def obj {})
  # value: ["buildCall:", "<obj>"]

  ? test(js.asObject([]))
  # value: ["buildCall:", "<{}>"]

-------------------------------------------------------------------------------

XXX Review the E deSubgraphKit and deASTKit for cases that we don't handle

-------------------------------------------------------------------------------

deJSONTreeKit recognizer.

We will use deSubgraphKit builders to test the output, as well as deJSONTreeKit builders in cases where the results would be ambiguous or it is useful as a simpler test.

  ? def mb() {
  >   return deSubgraphKit.makeBuilder(js.asObject([
  >     "x" => "aardvarks",
  >     "callable" => def callable := js.asFunction(fn a,b { a + b }),
  >     "array" => js.asFunction(__makeList),
  >   ]))
  > }; null

The recognizer object is deJSONTreeKit itself, because no parameters are needed. 

--- Atoms.

Number atom.

  ? deJSONTreeKit.recognize(2.213119, mb())
  # value: 2.213119

Checking that invoking the builder wasn't forgotten:

  ? deJSONTreeKit.recognize(2.213119, makeAtomNotingBuilder())
  # value: ["atom", 2.213119]
  
String atom.

  ? deJSONTreeKit.recognize("x", makeAtomNotingBuilder())
  # value: ["atom", "x"]
  
--- Import.

  ? deJSONTreeKit.recognize(["import", "x"], mb())
  # value: "aardvarks"

--- Call.

Getting complicated: we'll test roundtrip as well

  ? deJSONTreeKit.recognize(["call", ["import", "callable"], "call", ["junk", "Hello ", "world"]], deJSONTreeKit.makeBuilder())
  # value: ["call", ["import", "callable"], "call", ["junk", "Hello ", "world"]]

  Checking that our function works independently...
  ? mb().buildImport("callable")("fo", "o")
  # value: "foo"

  ? deJSONTreeKit.recognize(["call", ["import", "callable"], "call", ["junk", "Hello ", "world"]], mb())
  # value: "Hello world"
  
--- Define and ibid.

  ? deJSONTreeKit.recognize(["call", ["import", "callable"], "call", [["define", 0, 99], ["ibid", 0], ["ibid", 0]]], deJSONTreeKit.makeBuilder())
  # value: ["call", ["import", "callable"], "call", [["define", 0, 99], ["ibid", 0], ["ibid", 0]]]
  
  ? deJSONTreeKit.recognize(["call", ["import", "callable"], "call", [["define", 0, 99], ["ibid", 0], ["ibid", 0]]], mb())
  # value: 198

A recognizer must not assume that the input's temporary indexes are the same as the output's. This constitutes a test:

  ? deJSONTreeKit.recognize(["call", ["import", "callable"], "call", [["define", 7, 99], ["ibid", 7], ["ibid", 7]]], mb())
  # value: 198

XXX Review the Safe Serialization paper about what the constraints on temporary indexes are.

--- Defrec.

  ? deJSONTreeKit.recognize(["defrec", 0, ["call", ["import", "array"], "call", [-1, "a", ["ibid", 0]]]], mb())
  # value: ["a", [Ref to a,[Ref to ]]]

--- Invalid input

  ? deJSONTreeKit.recognize(["aardvarks", 0])
  # problem: Error: deJSONTreeKit: Unrecognized tag 'aardvarks' in input: aardvarks,0

-------------------------------------------------------------------------------

deJavaScriptKit builder.

deJavaScriptKit is used solely for testing, and primarily exercised by the CapTP traceMessages tool; these tests are incomplete.

Testing string escaping characteristics up to beyond-Latin-1:

  ? def s := E.call(cajitaEnv["String"], "fromCharCode", var i := -1; accum [] while (i < 257) { _.with(i += 1) })
  # value: "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u007f\u0080\u0081\u0082\u0083\u0084\u0085\u0086\u0087\u0088\u0089\u008a\u008b\u008c\u008d\u008e\u008f\u0090\u0091\u0092\u0093\u0094\u0095\u0096\u0097\u0098\u0099\u009a\u009b\u009c\u009d\u009e\u009f\u00a0\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ad\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101"

  
  ? def b := deJavaScriptKit.makeBuilder()
  > b.buildRoot(b.buildAtom(s))
  # value: "\'\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&\\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\u007f\\u0080\\u0081\\u0082\\u0083\\u0084\\u0085\\u0086\\u0087\\u0088\\u0089\\u008a\\u008b\\u008c\\u008d\\u008e\\u008f\\u0090\\u0091\\u0092\\u0093\\u0094\\u0095\\u0096\\u0097\\u0098\\u0099\\u009a\\u009b\\u009c\\u009d\\u009e\\u009f\\u00a0\\u00a1\\u00a2\\u00a3\\u00a4\\u00a5\\u00a6\\u00a7\\u00a8\\u00a9\\u00aa\\u00ab\\u00ac\\u00ad\\u00ae\\u00af\\u00b0\\u00b1\\u00b2\\u00b3\\u00b4\\u00b5\\u00b6\\u00b7\\u00b8\\u00b9\\u00ba\\u00bb\\u00bc\\u00bd\\u00be\\u00bf\\u00c0\\u00c1\\u00c2\\u00c3\\u00c4\\u00c5\\u00c6\\u00c7\\u00c8\\u00c9\\u00ca\\u00cb\\u00cc\\u00cd\\u00ce\\u00cf\\u00d0\\u00d1\\u00d2\\u00d3\\u00d4\\u00d5\\u00d6\\u00d7\\u00d8\\u00d9\\u00da\\u00db\\u00dc\\u00dd\\u00de\\u00df\\u00e0\\u00e1\\u00e2\\u00e3\\u00e4\\u00e5\\u00e6\\u00e7\\u00e8\\u00e9\\u00ea\\u00eb\\u00ec\\u00ed\\u00ee\\u00ef\\u00f0\\u00f1\\u00f2\\u00f3\\u00f4\\u00f5\\u00f6\\u00f7\\u00f8\\u00f9\\u00fa\\u00fb\\u00fc\\u00fd\\u00fe\\u00ff\\u0100\\u0101\'"
  

