# Copyright 2007-2009 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

-------------------------------------------------------------------------------
-- This file was derived from E-on-CL's CapTP; improvements should be shared --
-------------------------------------------------------------------------------
  
  ? pragma.syntax("0.9")

-------------------------------------------------------------------------------
The following code is boilerplate to load a Cajita module with collecting the return value. This code should be folded into some Cajita or EoJS library.

  ? def js := <import:org.erights.eojs.jsTools>; null
  ? def cajita := <import:org.erights.eojs.cajita>; null

  ? def oldNewModuleHandler := cajitaPriv.getNewModuleHandler()
  >
  > def loadAndWait(url) {
  >   def value
  >   cajitaPriv.setNewModuleHandler(js.asObject([
  >     "handle" => js.asFunction(fn newModule {
  >       cajitaPriv.setNewModuleHandler(oldNewModuleHandler)
  >       bind value := newModule.instantiate(cajitaPriv.get___(), oldNewModuleHandler.getImports())
  >     })
  >   ]))
  >   EoJS.asyncLoad(url)
  >   interp.waitAtTop(value)
  >   return value
  > }
  > null
  
  ? def exports := loadAndWait("../src/everything.out.js"); null
  ? cajitaPriv.setNewModuleHandler(oldNewModuleHandler)
  
  x ? cajitaPriv.setLogFunc(js.asFunction(traceln));

-------------------------------------------------------------------------------

  ? def deSubgraphKit := exports["deSubgraphKit"]; null
  ? def once := exports["once"]; null

Utility for producing traces of CapTP communication.

  ? def traceMessages := exports["traceMessages"]; null
  
  
  XXX test nonnull-next behavior too
  ? def ctrace := traceMessages(js.asFunction(stdout.println), js.null())
  # value: [tracing CapTP to null]

---

  ? ctrace.GCAnswer(-3)
  # stdout: GCAnswer(-3)
  #         
  
  # value: <JS undefined>
  
  ? ctrace.DeliverOnly(0, "foo",
  >   once(js.asFunction(fn b {
  >     b.buildRoot(b.buildCall(
  >       b.buildImport("builtinsMaker"),
  >       "frozenArray",
  >       [b.buildLiteral("bar"),
  >        b.buildCall(b.buildImport("CapTP_1_descs"),
  >                    "Incoming",
  >                    [b.buildLiteral(2)] )]))})))
  # stdout: DeliverOnly(0, "foo", cajita.freeze(["bar", IncomingDesc(2)]))
  #         
  
  # value: <JS undefined>

