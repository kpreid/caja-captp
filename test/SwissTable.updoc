# Copyright 2007 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

  ? pragma.syntax("0.9")
  
-------------------------------------------------------------------------------
-- This file was derived from E-on-CL's CapTP; improvements should be shared --
-------------------------------------------------------------------------------
The following code is boilerplate to load a Cajita module with collecting the return value. This code should be folded into some Cajita or EoJS library.

  ? def js := <import:org.erights.eojs.jsTools>; null
  ? def cajita := <import:org.erights.eojs.cajita>; null

  ? def oldNewModuleHandler := cajitaPriv.getNewModuleHandler()
  >
  > def loadAndWait(url) {
  >   def value
  >   cajitaPriv.setNewModuleHandler(js.asObject([
  >     "handle" => js.asFunction(fn newModule {
  >       bind value := newModule.instantiate(cajitaPriv.get___(), oldNewModuleHandler.getImports())
  >     })
  >   ]))
  >   EoJS.asyncLoad(url)
  >   interp.waitAtTop(value)
  >   return value
  > }
  > null
  
  ? def exports := loadAndWait("../src/everything.out.js"); null

  ? cajitaPriv.setNewModuleHandler(oldNewModuleHandler)

-------------------------------------------------------------------------------

  ? def makeSwissTable := exports["SwissTable"]
  > def makeSwiss := exports["Swiss"]
  > null

  ? def swissTable := makeSwissTable(exports["entropy"])
  # value: [SwissTable]

Bug: getNewSwiss and lookupSwiss would not accept promises

XXX caja-captp: this test does not do what it should, we need to use a Caja-CapTP promise not an E promise.

  ? def p
  > def swiss := swissTable.getNewSwiss(p) ;null
  
  ? swissTable.lookupSwiss(swiss) == p
  # value: true

Bug: null was being used as a lookup failure marker in a way that only worked in the Java version.

  ? def faultHandler := js.asFunction(fn hash {
  >   stdout.println("faulting for " + hash.showBits())
  > })
  > swissTable.addFaultHandler(faultHandler)
  # value: <JS undefined>

This should fault, and fail. (The garbage is the bytes-as-latin1 representation of the hashed imitation swiss number "aardvarks".)

  ? swissTable.lookupSwiss(makeSwiss("aardvarks"))
  # stdout: faulting for 33ece021bcf67b6aeab8fb8ba0de55b5b92d3875
  #         
  
  # problem: Error: Swiss number not found

  ? def p
  > def swiss := swissTable.getNewSwiss(p) ;null
  > bind p := null

This should not fault.

  ? swissTable.lookupSwiss(swiss) == p
  # value: true

  ? swissTable.removeFaultHandler(faultHandler)
  # value: <JS undefined>

XXX test case: register a promise, resolve it to null, the lookupSwiss it
XXX test that the weak maps are used properly
XXX write more tests; this covers only specific bugs found.